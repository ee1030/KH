package com.kh.challenge.model.service;

import java.util.Set;

public interface ChallengeService {
	
	// 10 ~ 1 역순 출력
	// 10 9 8 7 6 5 4 3 2 1 
	public void challenge1();
	
	// 1 ~ 100까지의 합
	// 1~100 합계 : 5050
	public void challenge2();
	
	// 1 ~ 30까지 3의 배수 출력
	//3 6 9 12 15 18 21 24 27 30 
	public void challenge3();
	
	// a ~ z 사이 모든 알파벳 출력
	public void challenge4();
	
	
	// 입력받은 두 수 사이의 정수를 입력 순서 상관 없이 출력 모두 출력
	// 입력 1 : 7
	// 입력 2 : 2
	// 2 3 4 5 6 7 
	public void challenge5();
	
	
	// 입력받은 정수가 소수인지 판별
	//정수 입력 : 17
	//소수 입니다.
	
	//정수 입력 : 6
	//소수가 아닙니다.
	public void challenge6();

	
	// 구구단 2단 ~ 9단 모두 정방향 출력
	/*
		2 * 1 = 2
		2 * 2 = 4
		2 * 3 = 6
		...
		9 * 7 = 63
		9 * 8 = 72
		9 * 9 = 81
	*/
	public void challenge7();
	
	
	// 구구단 2단 ~ 9단 모두 역방향 출력
	/*	
		실행할 챌린지 번호 입력 : 8
		9 * 9 = 81
		9 * 8 = 72
		9 * 7 = 63
		...
		2 * 3 = 6
		2 * 2 = 4
		2 * 1 = 2
	*/	
	public void challenge8();

	
	// 구구단 2 ~ 9단 까지의 중 결과 값이 5의 배수일 때만 출력
	/*
		2 * 5 = 10
		3 * 5 = 15
		4 * 5 = 20
		5 * 1 = 5
		5 * 2 = 10
		5 * 3 = 15
		5 * 4 = 20
		5 * 5 = 25
		5 * 6 = 30
		5 * 7 = 35
		5 * 8 = 40
		5 * 9 = 45
		6 * 5 = 30
		7 * 5 = 35
		8 * 5 = 40
		9 * 5 = 45
	 */
	public void challenge9();
	
	
	// 입력받은 수 만큼의 행, 열을 갖는 사각형을 *로 출력
	/*
		입력 : 4
		****
		****
		****
		****
	*/
	public void challenge10();
	
	
	// 1행 부터 입력받은 수 까지 행이 증감하고, 행의 번호 만큼의 열을 갖는 삼각형을 *로 출력
	/*
		입력 : 4
		*
		**
		***
		****
	*/
	public void challenge11();
	
	
	// 입력받은 수 부터 1행 까지 행이 감소하고, 행의 번호 만큼의 열을 갖는 삼각형을 *로 출력
	/*
		입력 : 4
		****
		***
		**
		*
	*/
	public void challenge12();
	
	
	// Up/Down 게임 만들기
	// 1 ~ 50사이 난수 하나를 발생시킨 후 
	// 정수를 입력받아 발생한 난수와 일치하는 값을 입력할 때 까지의 count 측정 후 출력 
	// 발생한 난수보다 큰 수를 입력한 경우 - Down 출력
	// 발상행 난수보다 작은 수를 입력한 경우 - Up  출력
	/*
	입력 : 25
	Up
	입력 : 37
	정답!! / count : 2
	*/
	public void challenge13();
	
	
	// 1 ~ 10 사이 난수를 생성시켜 길이 10짜리 배열에 저장 후 정방향, 역방향 출력 (난수 중복 허용)
	// 정방향 : 3 7 9 3 10 7 4 2 4 8 
	// 역방향 : 8 4 2 4 7 10 3 9 7 3 
	public void challenge14();
	

	
	// 1 ~ 100 사이 난수 10개를 발생시켜 오름차순 정렬하여 출력(난수 중복 X)
	// 8 25 33 42 46 71 75 80 96 97 
	public void challenge15();
	
	// 1 ~ 100 사이 난수 10개를 발생시켜 내림차순 정렬하여 출력(난수 중복 X)
	// 95 92 64 37 32 17 16 7 6 5 
	public void challenge16();
	
	
	// 4행 4열 int형 2차원 배열 선언 및 할당 후 
	// 1~16까지의 수를 아래와 같이 열 순서대로 초기화 후 출력하기
	/*
		  1  5  9 13
		  2  6 10 14
		  3  7 11 15
		  4  8 12 16
	*/
	public void challenge17();
	
	
	
	// 입력 받은 수 만큼의 행과 열을 갖는 char 2차원 배열을 선언, 할당한 후
	// 2차원 배열의 대각선에 해당 부분에는 '*'을 저장 후 2차원 배열 출력
	/*
		입력 : 5
		*   *
		 * *
		  *
		 * *
		*   *
	*/
	public void challenge18();
	
	
	
	// 4x4 배열, 1~16 난수 배치,  
	// 입력 받는 값과 일치 부분을 0으로 변환
	// 모두 0이되면 종료
	/*
	 9  1  4  7 
	 15 11  6 16 
	  2 14 12 13 
	  8  5 10  3 
	 0으로 변환할 숫자 : 9
	 
	  0  1  4  7 
	 15 11  6 16 
	  2 14 12 13 
	  8  5 10  3 
	 0으로 변환할 숫자 : 1
	 
	  0  0  4  7 
	 15 11  6 16 
	  2 14 12 13 
	  8  5 10  3 
  */
	public void challenge19();
	
	
	
	
	// 거스름돈 계산
	// 계산해야되는 금액, 지불한 금액  두 수를 입력받아
	// 거스름돈으로 받아야되는 5만원, 1만원, 5천원, 1천원, 500원, 100원, 50원, 10원 의 개수를 각각 출력
	/*
	계산해야되는 금액 : 31640
	제출한 금액 : 50000
	거스름돈 : 18360
	5만원 : 0장
	1만원 : 1장
	5천원 : 1장
	1천원 : 3장
	500원 : 0개
	100원 : 3개
	50원 : 1개
	10원 : 1개
	 */
	public void challenge20();
	
	
	
	// [로또 5천원 자동이요~]
	// 입력받은 돈의 천원 단위 만큼의 로또번호 자동 생성 후
	// 로또 번호를 추첨하여 당첨 여부를 확인하고 맞는 개수에 따라 등수 부여하기
	// (로또는 6개의 추첨 번호와 1개 보너스 번호가 있음)
	// (1등 : 6개 / 2등 :5개+보너스 / 3등 : 5개 / 4등 : 4개 / 5등 : 3개 / 2,1,0개 : 낙첨)
	
	// (조건)
	// - 로또 번호 6개는 generateLotto() 메소드를 통해 생성 후 Set 형태로 반환.
	// - 당첨 번호 생성 시 6개의 로또 번호와 보너스번호 1개는 서로 중복되지 않도록 생성.
	/*
	금액 입력 : 10000
	[5, 10, 12, 37, 38, 39]
	[6, 9, 11, 12, 31, 39]
	[2, 8, 14, 23, 30, 38]
	[7, 10, 13, 33, 38, 45]
	[8, 19, 26, 30, 43, 44]
	[11, 20, 28, 31, 34, 41]
	[3, 5, 17, 19, 40, 43]
	[21, 28, 34, 36, 40, 43]
	[1, 2, 10, 19, 24, 37]
	[15, 16, 24, 26, 33, 39]

	당첨 번호 : [5, 20, 23, 28, 40, 41]
	보너스 : 26

	당첨 여부 확인
	(5)  10   12   37   38   39  [낙첨]
	  6    9   11   12   31   39  [낙첨]
	  2    8   14  (23)  30   38  [낙첨]
	  7   10   13   33   38   45  [낙첨]
	  8   19   26   30   43   44  [낙첨]
	 11  (20) (28)  31   34  (41) [5등]
	  3  (5)  17   19  (40)  43  [낙첨]
	 21  (28)  34   36  (40)  43  [낙첨]
	  1    2   10   19   24   37  [낙첨]
	 15   16   24   26   33   39  [낙첨]
	 */
	public void challenge21();
	
	// 로또 번호 6개를 생성해서 반환하는 메소드
	public Set<Integer> generateLotto();
}
